package robocorp.robot.intellij;

import com.intellij.openapi.options.Configurable;
import com.intellij.openapi.options.ConfigurationException;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.util.NlsContexts;
import com.intellij.ui.components.JBLabel;
import com.intellij.ui.components.JBTextArea;
import com.intellij.ui.components.JBTextField;
import com.intellij.util.ui.FormBuilder;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import robocorp.lsp.intellij.LanguageServerDefinition;

import javax.swing.*;


// IMPORTANT: Autogenerated. Don't change manually. Run codegen.py to regenerate.
class RobotProjectPreferencesComponent {

    private final JPanel panel;
    
    private final JBTextField robotLanguageServerPython = new JBTextField();
    private final JBTextField robotLanguageServerArgs = new JBTextField();
    private final JBTextField robotLanguageServerTcpPort = new JBTextField();
    private final JBTextField robotPythonExecutable = new JBTextField();
    private final JBTextField robotPythonEnv = new JBTextField();
    private final JBTextField robotVariables = new JBTextField();
    private final JBTextField robotPythonpath = new JBTextField();
    private final JBTextField robotLibrariesLibdocNeedsArgs = new JBTextField();
    private final JBTextField robotLibrariesLibdocPreGenerate = new JBTextField();
    private final JBTextField robotCodeFormatter = new JBTextField();
    private final JBTextField robotLintRobocopEnabled = new JBTextField();
    private final JBTextField robotLintEnabled = new JBTextField();
    private final JBTextField robotLintUndefinedKeywords = new JBTextField();
    private final JBTextField robotLintUndefinedLibraries = new JBTextField();
    private final JBTextField robotLintUndefinedResources = new JBTextField();
    private final JBTextField robotLintKeywordCallArguments = new JBTextField();
    private final JBTextField robotLintVariables = new JBTextField();
    private final JBTextField robotLintIgnoreVariables = new JBTextField();
    private final JBTextField robotCompletionsSectionHeadersForm = new JBTextField();
    private final JBTextField robotCompletionsKeywordsFormat = new JBTextField();
    private final JBTextField robotWorkspaceSymbolsOnlyForOpenDocs = new JBTextField();
    private final JBTextField robotCodeLensEnable = new JBTextField();

    public RobotProjectPreferencesComponent() {
        panel = FormBuilder.createFormBuilder()
                .addLabeledComponent(new JBLabel("Language Server Python"), robotLanguageServerPython, 1, false)
                .addComponent(createJTextArea("Path to the python executable used to start the Robot Framework Language Server\n(the default is searching python on the PATH).\n"))
                .addLabeledComponent(new JBLabel("Language Server Args"), robotLanguageServerArgs, 1, false)
                .addComponent(createJTextArea("Arguments to be passed to the Robot Framework Language Server\n(i.e.: [\"-vv\", \"--log-file=~/robotframework_ls.log\"]).\nNote: expected format: JSON Array\n"))
                .addLabeledComponent(new JBLabel("Language Server Tcp Port"), robotLanguageServerTcpPort, 1, false)
                .addComponent(createJTextArea("If the port is specified, connect to the language server previously started at the given port.\n"))
                .addLabeledComponent(new JBLabel("Python Executable"), robotPythonExecutable, 1, false)
                .addComponent(createJTextArea("Secondary python executable used to load user code and dependent libraries\n(the default is using the same python used for the language server).\n"))
                .addLabeledComponent(new JBLabel("Python Env"), robotPythonEnv, 1, false)
                .addComponent(createJTextArea("Environment variables used to load user code and dependent libraries.\n(i.e.: {\"MY_ENV_VAR\": \"some_value\"})\nNote: expected format: JSON Object\n"))
                .addLabeledComponent(new JBLabel("Variables"), robotVariables, 1, false)
                .addComponent(createJTextArea("Custom variables passed to RobotFramework\n(used when resolving variables and automatically passed to the launch config as --variable entries).\n(i.e.: {\"EXECDIR\": \"c:/my/proj/src\"})\nNote: expected format: JSON Object\n"))
                .addLabeledComponent(new JBLabel("Pythonpath"), robotPythonpath, 1, false)
                .addComponent(createJTextArea("Entries to be added to the PYTHONPATH\n(used when resolving resources and imports and automatically passed to the launch config as\n--pythonpath entries).\n(i.e.: [\"c:/my/pro/src\"])\nNote: expected format: JSON Array\n"))
                .addLabeledComponent(new JBLabel("Libraries Libdoc Needs Args"), robotLibrariesLibdocNeedsArgs, 1, false)
                .addComponent(createJTextArea("Libraries which will generate a different set of keywords based on the arguments provided.\n(i.e.: [\"remote\", \"fakerlib\"])\nNote: expected format: JSON Array\n"))
                .addLabeledComponent(new JBLabel("Libraries Libdoc Pre Generate"), robotLibrariesLibdocPreGenerate, 1, false)
                .addComponent(createJTextArea("List of libraries which should have the libspec pre-generated.\nNote: expected format: JSON Array\n"))
                .addLabeledComponent(new JBLabel("Code Formatter"), robotCodeFormatter, 1, false)
                .addComponent(createJTextArea("Allows the configuration of the code-formatter engine to be used. One of: robotidy, builtinTidy.\n"))
                .addLabeledComponent(new JBLabel("Lint Robocop Enabled"), robotLintRobocopEnabled, 1, false)
                .addComponent(createJTextArea("Specifies whether to lint with Robocop.\nNote: expected 'true' or 'false'\n"))
                .addLabeledComponent(new JBLabel("Lint Enabled"), robotLintEnabled, 1, false)
                .addComponent(createJTextArea("Determines whether linting should be enabled.\nNote: expected 'true' or 'false'\n"))
                .addLabeledComponent(new JBLabel("Lint Undefined Keywords"), robotLintUndefinedKeywords, 1, false)
                .addComponent(createJTextArea("Reports undefined keywords when linting.\nNote: expected 'true' or 'false'\n"))
                .addLabeledComponent(new JBLabel("Lint Undefined Libraries"), robotLintUndefinedLibraries, 1, false)
                .addComponent(createJTextArea("Reports undefined libraries when linting.\nNote: expected 'true' or 'false'\n"))
                .addLabeledComponent(new JBLabel("Lint Undefined Resources"), robotLintUndefinedResources, 1, false)
                .addComponent(createJTextArea("Reports undefined resources when linting.\nNote: expected 'true' or 'false'\n"))
                .addLabeledComponent(new JBLabel("Lint Keyword Call Arguments"), robotLintKeywordCallArguments, 1, false)
                .addComponent(createJTextArea("Reports issues in keyword call arguments.\nNote: expected 'true' or 'false'\n"))
                .addLabeledComponent(new JBLabel("Lint Variables"), robotLintVariables, 1, false)
                .addComponent(createJTextArea("Reports issues in undefined variables.\nNote: expected 'true' or 'false'\n"))
                .addLabeledComponent(new JBLabel("Lint Ignore Variables"), robotLintIgnoreVariables, 1, false)
                .addComponent(createJTextArea("Don't report undefined variables for these variables\n(i.e.: [\"Var1\", \"Var2\"]).\nNote: expected format: JSON Array\n"))
                .addLabeledComponent(new JBLabel("Completions Section Headers Form"), robotCompletionsSectionHeadersForm, 1, false)
                .addComponent(createJTextArea("Defines how completions should be shown for section headers\n(i.e.: *** Setting(s) ***). One of: plural, singular, both.\n"))
                .addLabeledComponent(new JBLabel("Completions Keywords Format"), robotCompletionsKeywordsFormat, 1, false)
                .addComponent(createJTextArea("Defines how keyword completions should be applied.\nOne of: First upper, Title Case, ALL UPPER, all lower.\n"))
                .addLabeledComponent(new JBLabel("Workspace Symbols Only For Open Docs"), robotWorkspaceSymbolsOnlyForOpenDocs, 1, false)
                .addComponent(createJTextArea("Collecting workspace symbols can be resource intensive on big projects and may slow down code-\ncompletion, in this case, it's possible collect info only for open files on big projects.\nNote: expected 'true' or 'false'\n"))
                .addLabeledComponent(new JBLabel("Code Lens Enable"), robotCodeLensEnable, 1, false)
                .addComponent(createJTextArea("Enables or disables code-lenses\n(Run/Debug/Interactive console)\nNote: expected 'true' or 'false'\n"))
                
                .addComponentFillVertically(new JPanel(), 0)
                .getPanel();
    }

    private JBTextArea createJTextArea(String text) {
        JBTextArea f = new JBTextArea();
        f.setText(text);
        f.setEditable(false);
        f.setBackground(null);
        f.setBorder(null);
        f.setFont(UIManager.getFont("Label.font"));
        return f;
    }

    public JPanel getPanel() {
        return panel;
    }

    public JComponent getPreferredFocusedComponent() {
        return robotPythonExecutable;
    }

    
    @NotNull
    public String getRobotLanguageServerPython() {
        return robotLanguageServerPython.getText();
    }

    public void setRobotLanguageServerPython (@NotNull String newText) {
        robotLanguageServerPython.setText(newText);
    }
    
    @NotNull
    public String getRobotLanguageServerArgs() {
        return robotLanguageServerArgs.getText();
    }

    public void setRobotLanguageServerArgs (@NotNull String newText) {
        robotLanguageServerArgs.setText(newText);
    }
    
    @NotNull
    public String getRobotLanguageServerTcpPort() {
        return robotLanguageServerTcpPort.getText();
    }

    public void setRobotLanguageServerTcpPort (@NotNull String newText) {
        robotLanguageServerTcpPort.setText(newText);
    }
    
    @NotNull
    public String getRobotPythonExecutable() {
        return robotPythonExecutable.getText();
    }

    public void setRobotPythonExecutable (@NotNull String newText) {
        robotPythonExecutable.setText(newText);
    }
    
    @NotNull
    public String getRobotPythonEnv() {
        return robotPythonEnv.getText();
    }

    public void setRobotPythonEnv (@NotNull String newText) {
        robotPythonEnv.setText(newText);
    }
    
    @NotNull
    public String getRobotVariables() {
        return robotVariables.getText();
    }

    public void setRobotVariables (@NotNull String newText) {
        robotVariables.setText(newText);
    }
    
    @NotNull
    public String getRobotPythonpath() {
        return robotPythonpath.getText();
    }

    public void setRobotPythonpath (@NotNull String newText) {
        robotPythonpath.setText(newText);
    }
    
    @NotNull
    public String getRobotLibrariesLibdocNeedsArgs() {
        return robotLibrariesLibdocNeedsArgs.getText();
    }

    public void setRobotLibrariesLibdocNeedsArgs (@NotNull String newText) {
        robotLibrariesLibdocNeedsArgs.setText(newText);
    }
    
    @NotNull
    public String getRobotLibrariesLibdocPreGenerate() {
        return robotLibrariesLibdocPreGenerate.getText();
    }

    public void setRobotLibrariesLibdocPreGenerate (@NotNull String newText) {
        robotLibrariesLibdocPreGenerate.setText(newText);
    }
    
    @NotNull
    public String getRobotCodeFormatter() {
        return robotCodeFormatter.getText();
    }

    public void setRobotCodeFormatter (@NotNull String newText) {
        robotCodeFormatter.setText(newText);
    }
    
    @NotNull
    public String getRobotLintRobocopEnabled() {
        return robotLintRobocopEnabled.getText();
    }

    public void setRobotLintRobocopEnabled (@NotNull String newText) {
        robotLintRobocopEnabled.setText(newText);
    }
    
    @NotNull
    public String getRobotLintEnabled() {
        return robotLintEnabled.getText();
    }

    public void setRobotLintEnabled (@NotNull String newText) {
        robotLintEnabled.setText(newText);
    }
    
    @NotNull
    public String getRobotLintUndefinedKeywords() {
        return robotLintUndefinedKeywords.getText();
    }

    public void setRobotLintUndefinedKeywords (@NotNull String newText) {
        robotLintUndefinedKeywords.setText(newText);
    }
    
    @NotNull
    public String getRobotLintUndefinedLibraries() {
        return robotLintUndefinedLibraries.getText();
    }

    public void setRobotLintUndefinedLibraries (@NotNull String newText) {
        robotLintUndefinedLibraries.setText(newText);
    }
    
    @NotNull
    public String getRobotLintUndefinedResources() {
        return robotLintUndefinedResources.getText();
    }

    public void setRobotLintUndefinedResources (@NotNull String newText) {
        robotLintUndefinedResources.setText(newText);
    }
    
    @NotNull
    public String getRobotLintKeywordCallArguments() {
        return robotLintKeywordCallArguments.getText();
    }

    public void setRobotLintKeywordCallArguments (@NotNull String newText) {
        robotLintKeywordCallArguments.setText(newText);
    }
    
    @NotNull
    public String getRobotLintVariables() {
        return robotLintVariables.getText();
    }

    public void setRobotLintVariables (@NotNull String newText) {
        robotLintVariables.setText(newText);
    }
    
    @NotNull
    public String getRobotLintIgnoreVariables() {
        return robotLintIgnoreVariables.getText();
    }

    public void setRobotLintIgnoreVariables (@NotNull String newText) {
        robotLintIgnoreVariables.setText(newText);
    }
    
    @NotNull
    public String getRobotCompletionsSectionHeadersForm() {
        return robotCompletionsSectionHeadersForm.getText();
    }

    public void setRobotCompletionsSectionHeadersForm (@NotNull String newText) {
        robotCompletionsSectionHeadersForm.setText(newText);
    }
    
    @NotNull
    public String getRobotCompletionsKeywordsFormat() {
        return robotCompletionsKeywordsFormat.getText();
    }

    public void setRobotCompletionsKeywordsFormat (@NotNull String newText) {
        robotCompletionsKeywordsFormat.setText(newText);
    }
    
    @NotNull
    public String getRobotWorkspaceSymbolsOnlyForOpenDocs() {
        return robotWorkspaceSymbolsOnlyForOpenDocs.getText();
    }

    public void setRobotWorkspaceSymbolsOnlyForOpenDocs (@NotNull String newText) {
        robotWorkspaceSymbolsOnlyForOpenDocs.setText(newText);
    }
    
    @NotNull
    public String getRobotCodeLensEnable() {
        return robotCodeLensEnable.getText();
    }

    public void setRobotCodeLensEnable (@NotNull String newText) {
        robotCodeLensEnable.setText(newText);
    }
    

}

// IMPORTANT: Autogenerated. Don't change manually. Run codegen.py to regenerate.
public class RobotProjectPreferencesPage implements Configurable {
    
    private Project project;

    public RobotProjectPreferencesPage(Project project){
        if(project == null){
            throw new AssertionError("Project must not be null.");
        }
        this.project = project;
    }
    
    private RobotProjectPreferencesComponent component;

    @Override
    public @NlsContexts.ConfigurableName String getDisplayName() {
        return "Robot Framework (Project)";
    }

    @Override
    public JComponent getPreferredFocusedComponent() {
        return component.getPreferredFocusedComponent();
    }

    @Override
    public @Nullable JComponent createComponent() {
        component = new RobotProjectPreferencesComponent();
        return component.getPanel();
    }

    @Override
    public boolean isModified() {
        RobotProjectPreferences settings = RobotProjectPreferences.getInstance(project);
        
        if(!settings.getRobotLanguageServerPython().equals(component.getRobotLanguageServerPython())){
            return true;
        }
        
        if(!settings.getRobotLanguageServerArgs().equals(component.getRobotLanguageServerArgs())){
            return true;
        }
        
        if(!settings.getRobotLanguageServerTcpPort().equals(component.getRobotLanguageServerTcpPort())){
            return true;
        }
        
        if(!settings.getRobotPythonExecutable().equals(component.getRobotPythonExecutable())){
            return true;
        }
        
        if(!settings.getRobotPythonEnv().equals(component.getRobotPythonEnv())){
            return true;
        }
        
        if(!settings.getRobotVariables().equals(component.getRobotVariables())){
            return true;
        }
        
        if(!settings.getRobotPythonpath().equals(component.getRobotPythonpath())){
            return true;
        }
        
        if(!settings.getRobotLibrariesLibdocNeedsArgs().equals(component.getRobotLibrariesLibdocNeedsArgs())){
            return true;
        }
        
        if(!settings.getRobotLibrariesLibdocPreGenerate().equals(component.getRobotLibrariesLibdocPreGenerate())){
            return true;
        }
        
        if(!settings.getRobotCodeFormatter().equals(component.getRobotCodeFormatter())){
            return true;
        }
        
        if(!settings.getRobotLintRobocopEnabled().equals(component.getRobotLintRobocopEnabled())){
            return true;
        }
        
        if(!settings.getRobotLintEnabled().equals(component.getRobotLintEnabled())){
            return true;
        }
        
        if(!settings.getRobotLintUndefinedKeywords().equals(component.getRobotLintUndefinedKeywords())){
            return true;
        }
        
        if(!settings.getRobotLintUndefinedLibraries().equals(component.getRobotLintUndefinedLibraries())){
            return true;
        }
        
        if(!settings.getRobotLintUndefinedResources().equals(component.getRobotLintUndefinedResources())){
            return true;
        }
        
        if(!settings.getRobotLintKeywordCallArguments().equals(component.getRobotLintKeywordCallArguments())){
            return true;
        }
        
        if(!settings.getRobotLintVariables().equals(component.getRobotLintVariables())){
            return true;
        }
        
        if(!settings.getRobotLintIgnoreVariables().equals(component.getRobotLintIgnoreVariables())){
            return true;
        }
        
        if(!settings.getRobotCompletionsSectionHeadersForm().equals(component.getRobotCompletionsSectionHeadersForm())){
            return true;
        }
        
        if(!settings.getRobotCompletionsKeywordsFormat().equals(component.getRobotCompletionsKeywordsFormat())){
            return true;
        }
        
        if(!settings.getRobotWorkspaceSymbolsOnlyForOpenDocs().equals(component.getRobotWorkspaceSymbolsOnlyForOpenDocs())){
            return true;
        }
        
        if(!settings.getRobotCodeLensEnable().equals(component.getRobotCodeLensEnable())){
            return true;
        }
        
        return false;
    }

    @Override
    public void reset() {
        RobotProjectPreferences settings = RobotProjectPreferences.getInstance(project);
        
        component.setRobotLanguageServerPython(settings.getRobotLanguageServerPython());
        component.setRobotLanguageServerArgs(settings.getRobotLanguageServerArgs());
        component.setRobotLanguageServerTcpPort(settings.getRobotLanguageServerTcpPort());
        component.setRobotPythonExecutable(settings.getRobotPythonExecutable());
        component.setRobotPythonEnv(settings.getRobotPythonEnv());
        component.setRobotVariables(settings.getRobotVariables());
        component.setRobotPythonpath(settings.getRobotPythonpath());
        component.setRobotLibrariesLibdocNeedsArgs(settings.getRobotLibrariesLibdocNeedsArgs());
        component.setRobotLibrariesLibdocPreGenerate(settings.getRobotLibrariesLibdocPreGenerate());
        component.setRobotCodeFormatter(settings.getRobotCodeFormatter());
        component.setRobotLintRobocopEnabled(settings.getRobotLintRobocopEnabled());
        component.setRobotLintEnabled(settings.getRobotLintEnabled());
        component.setRobotLintUndefinedKeywords(settings.getRobotLintUndefinedKeywords());
        component.setRobotLintUndefinedLibraries(settings.getRobotLintUndefinedLibraries());
        component.setRobotLintUndefinedResources(settings.getRobotLintUndefinedResources());
        component.setRobotLintKeywordCallArguments(settings.getRobotLintKeywordCallArguments());
        component.setRobotLintVariables(settings.getRobotLintVariables());
        component.setRobotLintIgnoreVariables(settings.getRobotLintIgnoreVariables());
        component.setRobotCompletionsSectionHeadersForm(settings.getRobotCompletionsSectionHeadersForm());
        component.setRobotCompletionsKeywordsFormat(settings.getRobotCompletionsKeywordsFormat());
        component.setRobotWorkspaceSymbolsOnlyForOpenDocs(settings.getRobotWorkspaceSymbolsOnlyForOpenDocs());
        component.setRobotCodeLensEnable(settings.getRobotCodeLensEnable());
    }

    @Override
    public void apply() throws ConfigurationException {
        RobotProjectPreferences settings = RobotProjectPreferences.getInstance(project);
        String s;
        
        s = settings.validateRobotLanguageServerPython(component.getRobotLanguageServerPython());
        if(!s.isEmpty()) {
            throw new ConfigurationException("Error in Language Server Python:\n" + s);
        }
        s = settings.validateRobotLanguageServerArgs(component.getRobotLanguageServerArgs());
        if(!s.isEmpty()) {
            throw new ConfigurationException("Error in Language Server Args:\n" + s);
        }
        s = settings.validateRobotLanguageServerTcpPort(component.getRobotLanguageServerTcpPort());
        if(!s.isEmpty()) {
            throw new ConfigurationException("Error in Language Server Tcp Port:\n" + s);
        }
        s = settings.validateRobotPythonExecutable(component.getRobotPythonExecutable());
        if(!s.isEmpty()) {
            throw new ConfigurationException("Error in Python Executable:\n" + s);
        }
        s = settings.validateRobotPythonEnv(component.getRobotPythonEnv());
        if(!s.isEmpty()) {
            throw new ConfigurationException("Error in Python Env:\n" + s);
        }
        s = settings.validateRobotVariables(component.getRobotVariables());
        if(!s.isEmpty()) {
            throw new ConfigurationException("Error in Variables:\n" + s);
        }
        s = settings.validateRobotPythonpath(component.getRobotPythonpath());
        if(!s.isEmpty()) {
            throw new ConfigurationException("Error in Pythonpath:\n" + s);
        }
        s = settings.validateRobotLibrariesLibdocNeedsArgs(component.getRobotLibrariesLibdocNeedsArgs());
        if(!s.isEmpty()) {
            throw new ConfigurationException("Error in Libraries Libdoc Needs Args:\n" + s);
        }
        s = settings.validateRobotLibrariesLibdocPreGenerate(component.getRobotLibrariesLibdocPreGenerate());
        if(!s.isEmpty()) {
            throw new ConfigurationException("Error in Libraries Libdoc Pre Generate:\n" + s);
        }
        s = settings.validateRobotCodeFormatter(component.getRobotCodeFormatter());
        if(!s.isEmpty()) {
            throw new ConfigurationException("Error in Code Formatter:\n" + s);
        }
        s = settings.validateRobotLintRobocopEnabled(component.getRobotLintRobocopEnabled());
        if(!s.isEmpty()) {
            throw new ConfigurationException("Error in Lint Robocop Enabled:\n" + s);
        }
        s = settings.validateRobotLintEnabled(component.getRobotLintEnabled());
        if(!s.isEmpty()) {
            throw new ConfigurationException("Error in Lint Enabled:\n" + s);
        }
        s = settings.validateRobotLintUndefinedKeywords(component.getRobotLintUndefinedKeywords());
        if(!s.isEmpty()) {
            throw new ConfigurationException("Error in Lint Undefined Keywords:\n" + s);
        }
        s = settings.validateRobotLintUndefinedLibraries(component.getRobotLintUndefinedLibraries());
        if(!s.isEmpty()) {
            throw new ConfigurationException("Error in Lint Undefined Libraries:\n" + s);
        }
        s = settings.validateRobotLintUndefinedResources(component.getRobotLintUndefinedResources());
        if(!s.isEmpty()) {
            throw new ConfigurationException("Error in Lint Undefined Resources:\n" + s);
        }
        s = settings.validateRobotLintKeywordCallArguments(component.getRobotLintKeywordCallArguments());
        if(!s.isEmpty()) {
            throw new ConfigurationException("Error in Lint Keyword Call Arguments:\n" + s);
        }
        s = settings.validateRobotLintVariables(component.getRobotLintVariables());
        if(!s.isEmpty()) {
            throw new ConfigurationException("Error in Lint Variables:\n" + s);
        }
        s = settings.validateRobotLintIgnoreVariables(component.getRobotLintIgnoreVariables());
        if(!s.isEmpty()) {
            throw new ConfigurationException("Error in Lint Ignore Variables:\n" + s);
        }
        s = settings.validateRobotCompletionsSectionHeadersForm(component.getRobotCompletionsSectionHeadersForm());
        if(!s.isEmpty()) {
            throw new ConfigurationException("Error in Completions Section Headers Form:\n" + s);
        }
        s = settings.validateRobotCompletionsKeywordsFormat(component.getRobotCompletionsKeywordsFormat());
        if(!s.isEmpty()) {
            throw new ConfigurationException("Error in Completions Keywords Format:\n" + s);
        }
        s = settings.validateRobotWorkspaceSymbolsOnlyForOpenDocs(component.getRobotWorkspaceSymbolsOnlyForOpenDocs());
        if(!s.isEmpty()) {
            throw new ConfigurationException("Error in Workspace Symbols Only For Open Docs:\n" + s);
        }
        s = settings.validateRobotCodeLensEnable(component.getRobotCodeLensEnable());
        if(!s.isEmpty()) {
            throw new ConfigurationException("Error in Code Lens Enable:\n" + s);
        }
        
        settings.setRobotLanguageServerPython(component.getRobotLanguageServerPython());
        settings.setRobotLanguageServerArgs(component.getRobotLanguageServerArgs());
        settings.setRobotLanguageServerTcpPort(component.getRobotLanguageServerTcpPort());
        settings.setRobotPythonExecutable(component.getRobotPythonExecutable());
        settings.setRobotPythonEnv(component.getRobotPythonEnv());
        settings.setRobotVariables(component.getRobotVariables());
        settings.setRobotPythonpath(component.getRobotPythonpath());
        settings.setRobotLibrariesLibdocNeedsArgs(component.getRobotLibrariesLibdocNeedsArgs());
        settings.setRobotLibrariesLibdocPreGenerate(component.getRobotLibrariesLibdocPreGenerate());
        settings.setRobotCodeFormatter(component.getRobotCodeFormatter());
        settings.setRobotLintRobocopEnabled(component.getRobotLintRobocopEnabled());
        settings.setRobotLintEnabled(component.getRobotLintEnabled());
        settings.setRobotLintUndefinedKeywords(component.getRobotLintUndefinedKeywords());
        settings.setRobotLintUndefinedLibraries(component.getRobotLintUndefinedLibraries());
        settings.setRobotLintUndefinedResources(component.getRobotLintUndefinedResources());
        settings.setRobotLintKeywordCallArguments(component.getRobotLintKeywordCallArguments());
        settings.setRobotLintVariables(component.getRobotLintVariables());
        settings.setRobotLintIgnoreVariables(component.getRobotLintIgnoreVariables());
        settings.setRobotCompletionsSectionHeadersForm(component.getRobotCompletionsSectionHeadersForm());
        settings.setRobotCompletionsKeywordsFormat(component.getRobotCompletionsKeywordsFormat());
        settings.setRobotWorkspaceSymbolsOnlyForOpenDocs(component.getRobotWorkspaceSymbolsOnlyForOpenDocs());
        settings.setRobotCodeLensEnable(component.getRobotCodeLensEnable());
    }
}